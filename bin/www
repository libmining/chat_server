#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat_server:server');
var http = require('http');
var mongo = require("mongodb").MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server); //socket.io 서버 생성
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */



//////////////////////////////////////////////////////////////
////////////// 몽고 db 연결

mongo.connect('mongodb://127.0.0.1/chat', function(err, db) {
  if(err) throw err;


//////////////////////////////////////////////////////////////
////////////// socket.io 이벤트 처리

  io.on('connection', function(socket) {



    // join room : 클라이언트 최초접속시 room에 연결
    // data.room, data.sender
    socket.on('join room', function(data) {

      socket.join(data.room);
      console.log(data.room + ' : ' + data.sender + "입장했습니다.");

      //io.to(data.room).emit('new user');

    });


    //mongodb collection
    var col = db.collection('messages');


    // get : 클라이언트 최초로딩시 요청되는 이벤트
    // data.room, data.sender 통해 쿼리
    socket.on('get', function(data) {


      //find 쿼리 : room을 통해 데이터 검색
      col.find(
        {
          room: data.room

        }
      ).sort(
        {_id: 1}
      ).toArray(function(err, res) {

          if(err) throw err;

          // output : 검색결과(res)객체를 클라이언트에게 전송
          // res.sender, res.message, res.read, res.date,
          socket.emit('output', res);

        });

    });


    // input : 클라이언트가 체팅내용 입력
    // data.room, data.sender, data.message
    socket.on('input', function(data) {

      var room = data.room;
      var sender = data.sender;
      var message = data.message;


      var whitespacePattern = /^\s*$/;

      // 공백문자 처리
      if(whitespacePattern.test(sender) ||
        whitespacePattern.test(message)) {

        console.log("whitespacePattern");

      } else {
        var date = new Date();

        //insert 쿼리 : room, sender, message, date, read 입력
        col.insert(
          {
            room: room,
            sender: sender,
            message: message,
            date: date,
            read: 1
          }, function(err, result) {

            var ObjectId = require('mongodb').ObjectID;
            console.log('result._id : '+ result.ops[0]._id);
            data._id = result.ops[0]._id;
            //콜백으로 받은 내용을 다른 클라이언트에게 다시전송
            io.to(data.room).emit('output', [data]);

          });
      }
    });


    //개별 메시지에 읽음 이벤트 발생시 db.messages.read 값을 0으로 update
    socket.on('read', function(data) {

      var ObjectId = require('mongodb').ObjectID;

      console.log("on read : " + new ObjectId(data._id));

      //insert 쿼리 : 해당 _id를 받아서 read를 0으로
      col.update({_id: new ObjectId(data._id)}, {$set: {read: 0}});


    });


    // 읽었을경우 readall로 읽었음을 알림
    socket.on('readme', function(data) {

      socket.in(data.room).emit('readall', data);

    });
  });
});


///////////////////////////////////////////////////////////////

function normalizePort(val) {
  var port = parseInt(val, 10);

  if(isNaN(port)) {
    // named pipe
    return val;
  }

  if(port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch(error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
