#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat_server:server');
var http = require('http');
var mongo = require("mongodb").MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server); //socket.io 서버 생성
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */



//////////////////////////////////////////////////////////////
////////////// 몽고 db 연결
mongo.connect('mongodb://127.0.0.1/chat', function(err, db) {
  if(err) throw err;

//////////////////////////////////////////////////////////////
////////////// socket.io 이벤트 처리
  var rooms = [];

  io.on('connection', function(socket) {

    //////////////////////////////////////////////////////////
    ////// room version


    socket.on('join room', function(data) {

      socket.join(data.room);
      console.log(data.room + ' : ' + data.sender + "입장했습니다.");

      io.to(data.room).emit('new user');

    });


    //////////////////////////////////////////////////////////

    //mongodb collection
    var col = db.collection('messages');


    // get : 클라이언트 최초로딩시 요청되는 이벤트
    // data.sender, data.receiver 통해 쿼리
    socket.on('get', function(data) {

      console.log(data.room);
      //find 쿼리 ( room )
      col.find(
        {
          room: data.room

        }
      ).sort(
        {_id: 1}
      ).toArray(function(err, res) {

          if(err) throw err;
          //output 이벤트로 클라이언트에 쿼리
          socket.emit('output', res);

        });

    });


    // input : 클라이언트가 체팅 내용 입력시 이벤트
    // data.sender, data.receiver, data.message를 인자로 받음
    socket.on('input', function(data) {

      console.log("input : " + data.sender);

      var room = data.room;
      var sender = data.sender;
      var message = data.message;

      // 공백문자 처리
      var whitespacePattern = /^\s*$/;

      if(whitespacePattern.test(sender) ||
        whitespacePattern.test(message)) {

        console.log("not inserted");

      } else {
        var date = new Date();
        col.insert(
          {
            room: room,
            sender: sender,
            message: message,
            date: date,
            read: 1
          }, function() {

            //Emit latest messages to all clients
            //받은 내용을 다른 클라이언트에게 다시전송
            io.to(data.room).emit('output', [data]);

          });
      }
    });


    //개별 메시지에 읽음 이벤트 발생시 db.messages.read 값을 0으로 update

    socket.on('read', function(data) {

      var ObjectId = require('mongodb').ObjectID;

      console.log("on read : " + new ObjectId(data._id));

      col.update({_id: new ObjectId(data._id)}, {$set: {read: 0}});


    });


    // output 이벤트에 대하여 읽었음을 처리하기 위한 이벤트
    // 다시 readall이벤트를 발생시켜 읽었음 처리
    socket.on('readme', function(data) {


      socket.in(data.room).emit('readall', data);

    });
  });
});


///////////////////////////////////////////////////////////////

function normalizePort(val) {
  var port = parseInt(val, 10);

  if(isNaN(port)) {
    // named pipe
    return val;
  }

  if(port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if(error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch(error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
